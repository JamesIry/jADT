options{  FORCE_LA_CHECK = false;  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = true;  UNICODE_INPUT = true;  COMMON_TOKEN_ACTION = false;}PARSER_BEGIN(JavaDocParser)package com.pogofish.jadt.javadoc.javacc.generated;import com.pogofish.jadt.ast.*;import static com.pogofish.jadt.ast.JDToken.*;import static com.pogofish.jadt.ast.JavaDoc.*;import java.util.*;public abstract class JavaDocParser{}PARSER_END(JavaDocParser)JavaDoc javaDoc() :{  final String commentStart;  final List < JDToken > generalSection = new ArrayList < JDToken > ();  final List < JDTagSection > tagSections = new ArrayList < JDTagSection > ();  final String commentEnd;}{  < COMMENT_START >  {    commentStart = token.image;  }  (    LOOKAHEAD(nonTagStart())    generalSection(generalSection)  )?  (    tagSection(tagSections)  )*  < COMMENT_END >  {    commentEnd = token.image;  }  {    return _JavaDoc(commentStart, generalSection, tagSections, commentEnd);  }}void nonTagStart() :{}{  < WORD >| < ASTERISK >| < EOL >}void generalSection(List < JDToken > tokens) :{}{  sectionRemainder(tokens)}void tagSection(List < JDTagSection > tagSections) :{  final List < JDToken > tokens = new ArrayList < JDToken > ();  final JDToken.JDTag tag;}{  tag = tag()  {    tokens.add(tag);  }  sectionRemainder(tokens)  {    final JDTagSection section = new JDTagSection(tag.name, tokens);    tagSections.add(section);  }}void sectionRemainder(List < JDToken > tokens) :{}{  lineRemainder(tokens)  (    LOOKAHEAD(nonTagStart())    lineRemainder(tokens)  )*}void lineRemainder(List < JDToken > tokens) :{}{  contentLine(tokens)| lineEnding(tokens)}void contentLine(List < JDToken > tokens) :{  JDToken token;}{  (    LOOKAHEAD(lineChunk())    token = lineChunk()    {      tokens.add(token);    }  )+  (    LOOKAHEAD(< EOL >)    lineEnding(tokens)  )?}void lineEnding(List < JDToken > tokens) :{  JDToken token;}{  token = eol()  {    tokens.add(token);  }  (    LOOKAHEAD(asterisk())    token = asterisk()    {      tokens.add(token);    }  )?}JDToken lineChunk() :{  final JDToken token;}{  token = word()| token = asterisk()| token = tag()  {    return token;  }}JDToken word() :{}{  < WORD >  {    return _JDWord(token.image);  }}JDToken asterisk() :{}{  < ASTERISK >  {    return _JDAsterisk();  }}JDToken.JDTag tag() :{}{  < TAG >  {    return new JDToken.JDTag(token.image);  }}JDToken eol() :{}{  < EOL >  {    return _JDEOL(token.image);  }}TOKEN :{  < COMMENT_START : "/**" >| < COMMENT_END : "*/" >| < ASTERISK : "*" >| < EOL :    "\r\n"  | "\r"  | "\n" >| < TAG : "@" < BODY > >| < WORD : < BODY > >| < #BODY : (~[ " ", "\t", "\r", "\n", "*" ])+ >}SPECIAL_TOKEN :{  < WS : ([ " ", "\t" ])+ >}