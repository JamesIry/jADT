 /*Copyright 2012 James IryLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/options{  FORCE_LA_CHECK = false;  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = true;  UNICODE_INPUT = true;  COMMON_TOKEN_ACTION = false;}PARSER_BEGIN(BlockCommentParserImpl)/*Copyright 2012 James IryLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package com.pogofish.jadt.comments.javacc.generated;import com.pogofish.jadt.ast.*;import static com.pogofish.jadt.ast.BlockToken.*;import static com.pogofish.jadt.ast.BlockComment.*;import java.util.*;public class BlockCommentParserImpl{}PARSER_END(BlockCommentParserImpl)BlockComment blockComment() :{  final List < List < BlockToken > > lines = new ArrayList < List < BlockToken > > ();  List < BlockToken > line;}{  line = line()  {    lines.add(line);  }  (    < EOL >    {      line.add(_BlockEOL(token.image));    }    line = line()    {      lines.add(line);    }  )*  {    return _BlockComment(lines);  }}List < BlockToken > line() :{  final List < BlockToken > line = new ArrayList < BlockToken > ();  BlockToken token;}{  (    token = token()    {      line.add(token);    }  )*  {    return line;  }}BlockToken token() :{}{  < WS >  {    return _BlockWhiteSpace(token.image);  }| < WORD >  {    return _BlockWord(token.image);  }}TOKEN :{  < WS : ([ " ", "\t" ])+ >| < EOL :    "\r\n"  | "\r"  | "\n" >| < WORD : (~[ " ", "\t", "\r", "\n" ])+ >}