 /*Copyright 2012 James IryLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/options{  FORCE_LA_CHECK = false;  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = true;  UNICODE_INPUT = true;  COMMON_TOKEN_ACTION = false;}PARSER_BEGIN(BaseJavaDocParserImpl)/*Copyright 2012 James IryLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package com.pogofish.jadt.javadoc.javacc.generated;import com.pogofish.jadt.ast.*;import static com.pogofish.jadt.ast.JDToken.*;import static com.pogofish.jadt.ast.JavaDoc.*;import java.util.*;public abstract class BaseJavaDocParserImpl{  /**     * Return the whitespace attached to the next token     */  protected abstract List < JDToken > nextTokenWhitespace();}PARSER_END(BaseJavaDocParserImpl)JavaDoc javaDoc() :{  final String commentStart;  final List < JDToken > generalSection = new ArrayList < JDToken > ();  final List < JDTagSection > tagSections = new ArrayList < JDTagSection > ();  final String commentEnd;}{  < COMMENT_START >  {    commentStart = token.image;    generalSection.addAll(nextTokenWhitespace());  }  (    LOOKAHEAD(nonTagStart())    generalSection(generalSection)  )?  (    tagSection(tagSections)  )*  < COMMENT_END >  {    commentEnd = token.image;  }  {    return _JavaDoc(commentStart, generalSection, tagSections, commentEnd);  }}void nonTagStart() :{}{  < WORD >| < ASTERISK >| < EOL >}void generalSection(List < JDToken > tokens) :{}{  sectionRemainder(tokens)}void tagSection(List < JDTagSection > tagSections) :{  final List < JDToken > tokens = new ArrayList < JDToken > ();  final JDToken.JDTag tag;}{  tag = tag(tokens)  (    LOOKAHEAD(lineChunk())    sectionRemainder(tokens)  )?  {    final JDTagSection section = new JDTagSection(tag.name, tokens);    tagSections.add(section);  }}void sectionRemainder(List < JDToken > tokens) :{}{  lineRemainder(tokens)  (    LOOKAHEAD(nonTagStart())    lineRemainder(tokens)  )*}void lineRemainder(List < JDToken > tokens) :{}{  contentLine(tokens)| lineEnding(tokens)}void contentLine(List < JDToken > tokens) :{}{  (    LOOKAHEAD(lineChunk())    lineChunk(tokens)  )+  (    LOOKAHEAD(< EOL >)    lineEnding(tokens)  )?}void lineEnding(List < JDToken > tokens) :{}{  eol(tokens)  (    LOOKAHEAD(< ASTERISK >)    asterisk(tokens)  )?}void lineChunk(List < JDToken > tokens) :{}{  word(tokens)| asterisk(tokens)| tag(tokens)}void word(List < JDToken > tokens) :{}{  < WORD >  {    tokens.add(_JDWord(token.image));    tokens.addAll(nextTokenWhitespace());  }}void asterisk(List < JDToken > tokens) :{}{  < ASTERISK >  {    tokens.add(_JDAsterisk());    tokens.addAll(nextTokenWhitespace());  }}JDToken.JDTag tag(List < JDToken > tokens) :{}{  < TAG >  {    JDToken.JDTag tag = new JDToken.JDTag(token.image);    tokens.add(tag);    tokens.addAll(nextTokenWhitespace());    return tag;  }}void eol(List < JDToken > tokens) :{}{  < EOL >  {    tokens.add(_JDEOL(token.image));    tokens.addAll(nextTokenWhitespace());  }}TOKEN :{  < COMMENT_START : "/*" ("*")+ >| < COMMENT_END : ("*")+ "/" >| < ASTERISK : "*" >| < EOL :    "\r\n"  | "\r"  | "\n" >| < TAG : "@" < BODY > >| < WORD : < BODY > >| < #BODY : (~[ " ", "\t", "\r", "\n", "*" ])+ >}SPECIAL_TOKEN :{  < WS : ([ " ", "\t" ])+ >}