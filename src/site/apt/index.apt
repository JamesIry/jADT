About jADT

    | {{{./jadt_license.html} Licensing \>\>}}

    jADT turns {{{./what_adt.html}algebraic datatype}} description {{{./syntax.html}files}} into {{{./how_adt.html}Java source files}}. 
The resulting Java is nearly as easy to use as an Enum, but {{{./why_adt.html}far more flexible}}.

    jADT uses very liberal {{{./license.html}licensing}}.

    {{{./download.html}Download Now}}.

Sample

    Here's a sample jADT file that describes the abstract syntax tree for a fragment of a fictional language.  
All the fields are marked final (immutable) but need not be.

%{snippet|verbatim=true|file=jADT-samples/src/main/jadt/SampleAST.jadt|id=everything}    

Usage

    Java can be generated from jADT files using {{{./maven_generation.html}Apache Maven}}, {{{./ant_generation.html}Apache Ant}} or from {{{./shell_generation.html}the shell}}.

    To use the generated Java, you'll need some imports

%{snippet|verbatim=true|file=jADT-samples/src/main/java/com/pogofish/jadt/samples/ast/Usage.java|id=imports}    
    
    Here's an example of creating a complete function using generated factory methods
    
%{snippet|verbatim=true|file=jADT-samples/src/main/java/com/pogofish/jadt/samples/ast/Usage.java|id=sampleFunction}    
    
    Here's a sample function that returns all the integer literals in an expression
    
%{snippet|verbatim=true|file=jADT-samples/src/main/java/com/pogofish/jadt/samples/ast/Usage.java|id=expressionLiterals}    
    
    And here's a sample function that returns true only if a list of statements has a return statement. 
Unlike the previous example, this one uses a default case so that only relevant cases need to be considered.

%{snippet|verbatim=true|file=jADT-samples/src/main/java/com/pogofish/jadt/samples/ast/Usage.java|id=hasReturn}    

    | {{{./jadt_license.html} Licensing \>\>}}
