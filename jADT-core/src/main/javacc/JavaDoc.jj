options{  FORCE_LA_CHECK = false;  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = true;  UNICODE_INPUT = true;  COMMON_TOKEN_ACTION = false;}PARSER_BEGIN(JavaDocParser)package com.pogofish.jadt.javadoc.javacc.generated;public class JavaDocParser{}PARSER_END(JavaDocParser)void javaDoc() :{}{  < COMMENT_START >  (    LOOKAHEAD(nonTagStart())    generalSection()  )?  (    tagSection()  )*  < COMMENT_END >}void nonTagStart() :{}{  < WORD >| < ASTERISK >| < EOL >}void generalSection() :{}{  sectionRemainder()}void tagSection() :{}{  < TAG > sectionRemainder()}void sectionRemainder() :{}{  lineRemainder()  (    LOOKAHEAD(nonTagStart())    lineRemainder()  )*}void lineRemainder() :{}{  contentLine()| lineEnding()}void contentLine() :{}{  (    LOOKAHEAD(lineChunk())    lineChunk()  )+  ( LOOKAHEAD(< EOL >)    lineEnding())?}void lineEnding() :{}{  < EOL >  (    LOOKAHEAD(< ASTERISK >)    < ASTERISK >  )?}void lineChunk() :{}{  < WORD >| < ASTERISK >| < TAG >}TOKEN :{  < COMMENT_START : "/**" >| < COMMENT_END : "*/" >| < ASTERISK : "*" >| < EOL :    "\r\n"  | "\r"  | "\n" >| < TAG : "@" < BODY > >| < WORD : < BODY > >| < #BODY : (~[ " ", "\t", "\r", "\n", "*" ])+ >}SPECIAL_TOKEN :{  < WS : ([ " ", "\t" ])+ >}